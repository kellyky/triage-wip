Layout/ExtraSpacing:
  Description: 'Do not use unnecessary spacing.'
  Enabled: false
  VersionAdded: '0.49'
  # When true, allows most uses of extra spacing if the intent is to align
  # things with the previous or next line, not counting empty lines or comment
  # lines.
  AllowForAlignment: true
  # When true, allows things like 'obj.meth(arg)  # comment',
  # rather than insisting on 'obj.meth(arg) # comment'.
  # If done for alignment, either this OR AllowForAlignment will allow it.
  AllowBeforeTrailingComments: false
  # When true, forces the alignment of `=` in assignments on consecutive lines.
  ForceEqualSignAlignment: false

Layout/SpaceAfterComma:
  Description: 'Use spaces after commas.'
  StyleGuide: '#spaces-operators'
  Enabled: false
  VersionAdded: '0.49'

Layout/SpaceAfterMethodName:
  Description: >-
                 Do not put a space between a method name and the opening
                 parenthesis in a method definition.
  StyleGuide: '#parens-no-spaces'
  Enabled: true
  VersionAdded: '0.49'

Lint/AmbiguousBlockAssociation:
  Description: >-
                 Checks for ambiguous block association with method when param passed without
                 parentheses.
  Enabled: false
  VersionAdded: '0.48'
  VersionChanged: '1.13'
  AllowedMethods: []
  AllowedPatterns: []

Lint/UnusedBlockArgument:
  Description: 'Checks for unused block arguments.'
  StyleGuide: '#underscore-unused-vars'
  Enabled: false
  AutoCorrect: false
  VersionAdded: '0.21'
  VersionChanged: '1.61'
  IgnoreEmptyBlocks: true
  AllowUnusedKeywordArguments: false

Lint/UselessAssignment:
  Description: 'Checks for useless assignment to a local variable.'
  StyleGuide: '#underscore-unused-vars'
  Enabled: false
  AutoCorrect: false
  VersionAdded: '0.11'
  VersionChanged: '1.61'
  SafeAutoCorrect: false

Style/EvenOdd:
  Description: 'Favor the use of `Integer#even?` && `Integer#odd?`.'
  StyleGuide: '#predicate-methods'
  Enabled: false
  VersionAdded: '0.12'
  VersionChanged: '0.29'

Style/FrozenStringLiteralComment:
  Description: >-
                 Add the frozen_string_literal comment to the top of files
                 to help transition to frozen string literals by default.
  Enabled: false
  VersionAdded: '0.36'
  VersionChanged: '0.79'
  EnforcedStyle: never
  SupportedStyles:
    # `always` will always add the frozen string literal comment to a file
    # regardless of the Ruby version or if `freeze` or `<<` are called on a
    # string literal. It is possible that this will create errors.
    - always
    # `always_true` will add the frozen string literal comment to a file,
    # similarly to the `always` style, but will also change any disabled
    # comments (e.g. `# frozen_string_literal: false`) to be enabled.
    - always_true
    # `never` will enforce that the frozen string literal comment does not
    # exist in a file.
    - never
  SafeAutoCorrect: false

Style/NumericPredicate:
  Description: >-
                 Checks for the use of predicate- or comparison methods for
                 numeric comparisons.
  StyleGuide: '#predicate-methods'
  # This will change to a new method call which isn't guaranteed to be on the
  # object. Switching these methods has to be done with knowledge of the types
  # of the variables which rubocop doesn't have.
  Safe: false
  Enabled: false
  VersionAdded: '0.42'
  VersionChanged: '0.59'
  EnforcedStyle: predicate
  SupportedStyles:
    - predicate
    - comparison
  AllowedMethods: []
  AllowedPatterns: []
  # Exclude RSpec specs because assertions like `expect(1).to be > 0` cause
  # false positives.
  Exclude:
    - 'spec/**/*'

